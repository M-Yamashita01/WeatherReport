version: 2.1

orbs:
  aws-cli: circleci/aws-cli@0.1.13
  aws-ecr: circleci/aws-ecr@6.2.0
  aws-ecs: circleci/aws-ecs@1.0.4

aliases:
  - &default_env
    environment:
      SUDO_COMMAND: ""
  - &change_command
    run:
      name: change sudo command
      command: |
        if [[ $CIRCLE_SHELL_ENV =~ "localbuild" ]]; then
          echo 'export SUDO_COMMAND=sudo' >> $BASH_ENV
        fi

executors:
  default:
    working_directory: ~/WeatherReport
    docker:
      - image: circleci/ruby:2.6.5

commands:
  restore_server_db_migrate_pkg:
    steps:
      - restore_cache:
          name: Restore server db-migrate container
          key: docker-{{ .Branch }}--{{ checksum ".circleci/config.yml" }}--{{ checksum "docker-compose.test.yml"}}--{{ checksum "Dockerfile" }}

  restore_client_pkg:
    steps:
      - restore_cache:
          name: Restore client container
          key: docker-{{ .Branch }}--{{ checksum ".circleci/config.yml" }}--{{ checksum "docker-compose.test.yml"}}--{{ checksum "Dockerfile.frontend" }}

  save_server_db_migrate_pkg:
    steps:
      - save_cache:
          name: Save server db-migrate container
          key: docker-{{ .Branch }}--{{ checksum ".circleci/config.yml" }}--{{ checksum "docker-compose.test.yml"}}--{{ checksum "Dockerfile" }}
          paths:
            - ~/WeatherReport/

  save_client_pkg:
    steps:
      - save_cache:
          name: Save client container
          key: docker-{{ .Branch }}--{{ checksum ".circleci/config.yml" }}--{{ checksum "docker-compose.test.yml"}}--{{ checksum "Dockerfile.frontend" }}
          paths:
            - ~/WeatherReport/frontend/

  test_container:
    steps:
      - *change_command
      - run:
          name: docker-compose up
          command: |
            set -x
            ${SUDO_COMMAND} docker-compose -f docker-compose.test.yml up --build -d

      - run:
          name: sleep for waiting launch db
          command: |
            sleep 30

      - run:
          name: run tests
          command: |
            mkdir -p /tmp/test-results
            TEST_FILES="$(circleci tests glob 'spec/**/*_spec.rb' | circleci tests split --split-by=timings)"
            ${SUDO_COMMAND} docker-compose -f docker-compose.test.yml exec server bundle exec rspec --format progress \
                                                                  --format RspecJunitFormatter \
                                                                  --out /tmp/test-results/rspec.xml \
                                                                  $TEST_FILES

      # Save test results for timing analysis
      - store_test_results:
          path: /tmp/test-results

      - run:
          name: docker-compose down
          command: |
            set -x
            ${SUDO_COMMAND} docker-compose -f docker-compose.test.yml down

jobs:
  setup:
    executor: default
    environment:
      AWS_DEFAULT_OUTPUT: json
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: WeatherReport
      - aws-cli/install
      - aws-cli/configure:
          profile-name: my-profile-name
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_REGION

  test:
    executor: default
    steps:
      - checkout
      - *change_command      
      - setup_remote_docker
      - restore_server_db_migrate_pkg
      - restore_client_pkg
      - test_container
      - save_server_db_migrate_pkg
      - save_client_pkg

  build_for_aws:
    executor: default
    steps:
      - checkout
      - *change_command
      - setup_remote_docker
      - restore_server_db_migrate_pkg
      - restore_client_pkg
      - run:
          name: docker client build
          command: ${SUDO_COMMAND} docker build -t ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${CONTAINER_REPOSITORY}:client-${CONTAINER_IMAGE_TAG} -f Dockerfile.frontend .
      - run:
          name: docker server build
          command: ${SUDO_COMMAND} docker build -t ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${CONTAINER_REPOSITORY}:server-${CONTAINER_IMAGE_TAG} -f Dockerfile .
      - run:
          name: docker db-migration build
          command: ${SUDO_COMMAND} docker build -t ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${CONTAINER_REPOSITORY}:db-migration-${CONTAINER_IMAGE_TAG} -f Dockerfile .
      - run:
          name: docker db-openweathermap build
          command: ${SUDO_COMMAND} docker build -t ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${CONTAINER_REPOSITORY}:db-openweathermap-${CONTAINER_IMAGE_TAG} -f Dockerfile.openWeatherMap .

  deploy:
    executor: default
    steps:
      - checkout
      - restore_server_db_migrate_pkg
      - restore_client_pkg      
      - setup_remote_docker

      #- aws-ecr/build-and-push-image:
         #account-url: AWS_ECR_ACCOUNT_URL
         #dockerfile: Dockerfile
         #profile-name: my-profile-name
         #region: AWS_REGION
         #repo: AWS_ECR_REPOSITORY
         #tag: 'server-${CIRCLE_SHA1}'
      #- aws-ecr/build-and-push-image:
         #account-url: AWS_ECR_ACCOUNT_URL
         #dockerfile: Dockerfile
         #profile-name: my-profile-name
         #region: AWS_REGION
         #repo: AWS_ECR_REPOSITORY
         #tag: 'db-migration-${CIRCLE_SHA1}'
      #- aws-ecr/build-and-push-image:
         #account-url: AWS_ECR_ACCOUNT_URL
         # dockerfile: Dockerfile.openWeatherMap
         # profile-name: my-profile-name
         # region: AWS_REGION
         # repo: AWS_ECR_REPOSITORY
         # tag: 'db-openweathermap-${CIRCLE_SHA1}' 
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          dockerfile: Dockerfile.frontend
          profile-name: my-profile-name
          region: AWS_REGION
          repo: $AWS_ECR_REPOSITORY
          tag: 'frontend-${CIRCLE_SHA1}'         
workflows:
  setup_and_build:
    jobs:
      #- setup
      #- test:
          #requires:
            #- setup
      #- build_for_aws:
          #requires:
            #- test
          #filters:
            #branches:
              #only: release
      - deploy
          #requires:
            #- build_for_aws
          #filters:
            #branches:
              #only: release
      - aws-ecs/deploy-service-update:
          requires:
            - deploy
          aws-region: ${AWS_REGION}
          family: '${MY_APP_PREFIX}'
          cluster-name: '${MY_APP_PREFIX}'
          service-name: '${MY_APP_PREFIX}'
          container-image-name-updates: 'container=client,tag=client-0.0.1'

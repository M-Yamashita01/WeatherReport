version: 2.1

orbs:
  aws-cli: circleci/aws-cli@0.1.13
  aws-ecr: circleci/aws-ecr@6.2.0
  aws-ecs: circleci/aws-ecs@1.0.4

aliases:
  - &default_env
    environment:
      SUDO_COMMAND: ""
  - &change_command
    run:
      name: change sudo command
      command: |
        if [[ $CIRCLE_SHELL_ENV =~ "localbuild" ]]; then
          echo 'export SUDO_COMMAND=sudo' >> $BASH_ENV
        fi

executors:
  default:
    working_directory: ~/WeatherReport
    docker:
      - image: circleci/ruby:2.6.5
  terraform_machine:
    working_directory: ~/WeatherReport
    docker:
      - image: hashicorp/terraform:0.12.28

commands:
  restore_server_pkg:
    steps:
      - restore_cache:
          name: Restore server container
          key: docker-{{ .Branch }}--{{ checksum ".circleci/config.yml" }}--{{ checksum "backend/Dockerfile.server" }}

  restore_db_migrate_pkg:
    steps:
      - restore_cache:
          name: Restore db-migrate container
          key: docker-{{ .Branch }}--{{ checksum ".circleci/config.yml" }}--{{ checksum "backend/Dockerfile.migration" }}
  restore_client_pkg:
    steps:
      - restore_cache:
          name: Restore client container
          key: docker-{{ .Branch }}--{{ checksum ".circleci/config.yml" }}--{{ checksum "frontend/Dockerfile.frontend" }}

  save_server_pkg:
    steps:
      - save_cache:
          name: Save server container
          key: docker-{{ .Branch }}--{{ checksum ".circleci/config.yml" }}--{{ checksum "backend/Dockerfile.server" }}
          paths:
            - ~/WeatherReport/backend

  save_db_migrate_pkg:
    steps:
      - save_cache:
          name: Save db-migrate container
          key: docker-{{ .Branch }}--{{ checksum ".circleci/config.yml" }}--{{ checksum "backend/Dockerfile.migration" }}
          paths:
            - ~/WeatherReport/backend

  save_client_pkg:
    steps:
      - save_cache:
          name: Save client container
          key: docker-{{ .Branch }}--{{ checksum ".circleci/config.yml" }}--{{ checksum "frontend/Dockerfile.frontend" }}
          paths:
            - ~/WeatherReport/frontend/

  bundle_install:
    steps:
      - run:
          name: bundle install
          command: |
            cd ~/WeatherReport/backend
            bundle install
            cd ~/WeatherReport

  rubocop_container:
    steps:
      - *change_command
      - run:
          name: run rubocop
          command: |
            cd ~/WeatherReport/backend
            ${SUDO_COMMAND} bundle exec rubocop
            cd ~/WeatherReport


  test_container:
    steps:
      - *change_command
      - run:
          name: run unit tests
          command: |
            ${SUDO_COMMAND} docker-compose -f docker-compose.test.yml run --rm db-openweathermap sh -c 'cd .. && bundle install && env &&rake test -f spec/rakefile'
      
      - run:
          name: migrate db
          command: |
            ${SUDO_COMMAND} docker-compose -f docker-compose.test.yml run --rm db-migrate bundle exec rake db:migrate

      - run:
          name: run rspec
          command: |
            mkdir -p /tmp/test-results
            ${SUDO_COMMAND} docker-compose -f docker-compose.test.yml run --rm server_latest bundle exec rspec --format progress \
                                                                  --format RspecJunitFormatter \
                                                                  --out /tmp/test-results/rspec.xml \

      # Save test results for timing analysis
      - store_test_results:
          path: /tmp/test-results

      - run:
          name: docker-compose down
          command: |
            set -x
            ${SUDO_COMMAND} docker-compose -f docker-compose.test.yml down


  apply_manifest:
    steps:
      - run:
          name: Apply manifest
          command: |
            cd deploy/k8s
            ${SUDO_COMMAND} docker-compose -f docker-compose.yml build --force-rm
            ${SUDO_COMMAND} docker-compose -f docker-compose.yml run --rm deploy sh -c 'sh apply.sh'

  add_envsubst:
    steps:
      - run:
          name: Add envsubst
          command: |
            apk update
            apk upgrade
            apk add --no-cache gettext
jobs:
  setup:
    executor: default
    environment:
      AWS_DEFAULT_OUTPUT: json
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: WeatherReport

  test:
    executor: default
    steps:
      - checkout
      - *change_command      
      - setup_remote_docker
      - restore_server_pkg
      - restore_db_migrate_pkg
      - restore_client_pkg
      - test_container
      - save_server_pkg
      - save_db_migrate_pkg
      - save_client_pkg

  plan_terraform:
    executor: terraform_machine
    environment:
      S3_BUCKET: yamashii-terraform
      AWS_REGION: ap-northeast-1
      TERRAFROM_VER: 0.12.28
    steps:
      - checkout
      - add_envsubst
      - run:
          name: Init terraform
          command: |
            envsubst '$$AWS_ACCESS_KEY_ID $$AWS_SECRET_ACCESS_KEY $$AWS_BUCKET' < provider.tf > provider_converted.tf
            rm provider.tf
            mv provider_converted.tf provider.tf
            terraform init
          working_directory: ~/WeatherReport/deploy/terraform
      - run:
          name: Plan terraform
          command: terraform plan
          working_directory: ~/WeatherReport/deploy/terraform
    
  apply_terraform:
    executor: terraform_machine
    environment:
      S3_BUCKET: yamashii-terraform
      AWS_REGION: ap-northeast-1
      TERRAFROM_VER: 0.12.28
    steps:
      - checkout
      - add_envsubst
      - run:
          name: Init terraform
          command: |
            envsubst '$$AWS_ACCESS_KEY_ID $$AWS_SECRET_ACCESS_KEY $$AWS_BUCKET' < provider.tf > provider_converted.tf
            rm provider.tf
            mv provider_converted.tf provider.tf
            terraform init
          working_directory: ~/WeatherReport/deploy/terraform
      - run:
          name: Apply terraform
          command: terraform apply -auto-approve
          working_directory: ~/WeatherReport/deploy/terraform

  destroy_terraform:
    executor: terraform_machine
    environment:
      S3_BUCKET: yamashii-terraform
      AWS_REGION: ap-northeast-1
      TERRAFROM_VER: 0.12.28
    steps:
      - checkout
      - add_envsubst
      - run:
          name: Init terraform
          command: |
            envsubst '$$AWS_ACCESS_KEY_ID $$AWS_SECRET_ACCESS_KEY $$AWS_BUCKET' < provider.tf > provider_converted.tf
            rm provider.tf
            terraform init
          working_directory: ~/WeatherReport/deploy/terraform
      - run:
          name: Apply terraform
          command: terraform destroy -auto-approve
          working_directory: ~/WeatherReport/deploy/terraform

  push_images:
    executor: default
    steps:
      - checkout
      - restore_server_pkg
      - restore_db_migrate_pkg
      - restore_client_pkg      
      - setup_remote_docker
      - aws-ecr/build-and-push-image:
         account-url: AWS_ECR_ACCOUNT_URL
         dockerfile: backend/Dockerfile.server
         path: backend
         region: AWS_REGION
         repo: $AWS_ECR_REPOSITORY
         extra-build-args: '--build-arg rails_env=development'
         tag: 'backend_v1.0'
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          dockerfile: frontend/Dockerfile.frontend
          path: frontend
          region: AWS_REGION
          repo: $AWS_ECR_REPOSITORY
          tag: 'frontend_v1.0'

  apply_manifest:
    executor: default
    steps:
      - checkout
      - *change_command
      - setup_remote_docker
      - apply_manifest

workflows:
  test_and_deploy:
    jobs:
      - setup
      - test:
          requires:
            - setup
      - plan_terraform:
          requires:
            - test
      - apply_terraform:
          requires:
            - plan_terraform
          filters:
            branches:
              only:
                - develop
      - destroy_terraform:
          requires:
            - plan_terraform
          filters:
            branches:
              only:
                - destroy
      - push_images:
          requires:
            - plan_terraform
          # requires:
          #   - apply_terraform
          # filters:
          #   branches:
          #     only: 
          #       - develop
      - apply_manifest:
          requires:
            - push_images
          # requires:
            # - push_images
          # filters:
          #   branches:
          #     only:
          #       - develop
